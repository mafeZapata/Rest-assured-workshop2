name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      testClass:
        description: 'Clase de test a ejecutar (ej: workshop.CommentsTest o dejar vac칤o para todos)'
        required: false
        default: ''

jobs:
  test:
    runs-on: ubuntu-latest
    environment: test # Mant칠n el entorno para asegurar el acceso a los secrets/vars

    # Las variables de entorno ya no se declaran aqu칤 directamente,
    # sino que se cargar치n desde el archivo .env en un paso posterior.
    # env:
    #   ACADEMY_API_PATH: ${{ vars.ACADEMY_API_PATH }}
    #   API_APPLICATION_ID: ${{ secrets.API_APPLICATION_ID }}
    #   API_TOKEN: ${{ secrets.API_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      # Paso para crear el archivo .env
      - name: Create .env file with environment variables
        run: |
          echo "ACADEMY_API_PATH=${{ vars.ACADEMY_API_PATH }}" >> .env
          echo "API_APPLICATION_ID=${{ secrets.API_APPLICATION_ID }}" >> .env
          echo "API_TOKEN=${{ secrets.API_TOKEN }}" >> .env
        # Aseg칰rate de que este paso se ejecute correctamente.
        # Las variables se escribir치n en el archivo .env

      # Paso para cargar el archivo .env en el entorno del runner
      - name: Load .env file
        uses: motdotla/dotenv-action@v0.0.1 # Esta acci칩n cargar치 las variables del .env en el entorno.
        with:
          files: .env # Especifica el archivo a cargar. Por defecto es .env en la ra칤z.

      - name: Set up JDK 24
        uses: actions/setup-java@v3
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven

      - name: Show environment variables (debug) from .env
        run: |
          # Ahora accedemos a las variables como variables de entorno est치ndar de Bash,
          # ya que la acci칩n dotenv-action las ha cargado.
          echo "ACADEMY_API_PATH: $ACADEMY_API_PATH"
          echo "API_APPLICATION_ID: ${API_APPLICATION_ID:0:4}********"
          echo "API_TOKEN: ${API_TOKEN:0:4}********"

      - name: Build without tests
        run: mvn -B package -DskipTests
        working-directory: restAssured2

      - name: Run all tests or one specific class
        run: |
          if [ -z "${{ github.event.inputs.testClass }}" ]; then
            echo "游댍 Ejecutando TODOS los tests"
            # Las variables son accesibles directamente aqu칤 gracias a dotenv-action
            mvn test \
              -DACADEMY_API_PATH="$ACADEMY_API_PATH" \
              -DAPI_APPLICATION_ID="$API_APPLICATION_ID" \
              -DAPI_TOKEN="$API_TOKEN"
          else
            CLASS_NAME="${{ github.event.inputs.testClass }}"
            CLASS_NAME=${CLASS_NAME%.java}
            echo "游댍 Ejecutando test espec칤fico: $CLASS_NAME"
            # Las variables son accesibles directamente aqu칤 gracias a dotenv-action
            mvn -Dtest=$CLASS_NAME test \
              -DACADEMY_API_PATH="$ACADEMY_API_PATH" \
              -DAPI_APPLICATION_ID="$API_APPLICATION_ID" \
              -DAPI_TOKEN="$API_TOKEN"
          fi
        working-directory: restAssured2
